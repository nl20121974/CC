@page "/fetchdata"
@using CC.Data
@inject WeatherForecastService ForecastService

<PageTitle>Weather forecast</PageTitle>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudItem xs="12">
        <MudGrid Justify="Justify.FlexStart">
            @foreach (var forecast in forecasts)
            {
                <MudItem>
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Secondary">I</MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">@forecast.Date.ToShortDateString()</MudText>
                                <MudText Typo="Typo.body2">@forecast.TemperatureC</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardMedia Image="images/pilars.jpg" Height="250" />
                        <MudCardContent>
                            <MudText Typo="Typo.body2">@forecast.Summary</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                            <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
    }

    @code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }
}
